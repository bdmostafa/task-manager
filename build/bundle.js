/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Storage.js":
/*!************************!*\
  !*** ./src/Storage.js ***!
  \************************/
/*! exports provided: StorageConroller */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StorageConroller\", function() { return StorageConroller; });\n// Function to local storage ========================================================================\r\nconst StorageConroller = (() => {\r\n    return {\r\n        addTask(task) {\r\n            let tasks;\r\n            if (localStorage.getItem('tasks') === null) {\r\n                tasks = [];\r\n                tasks.push(task)\r\n            } else {\r\n                tasks = JSON.parse(localStorage.getItem('tasks'));\r\n                tasks.push(task)\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(tasks))\r\n        },\r\n        getTasks() {\r\n            let tasks;\r\n            if (localStorage.getItem('tasks') === null) {\r\n                tasks = [];\r\n            } else {\r\n                tasks = JSON.parse(localStorage.getItem('tasks'));\r\n            }\r\n            return tasks;\r\n        },\r\n        updateTask(updatedTask) {\r\n            let tasks = JSON.parse(localStorage.getItem('tasks'));\r\n            tasks.forEach((task, idx) => {\r\n                if (task.id === updatedTask.id) {\r\n                    // Remove selected indexed task\r\n                    // Add/Replace updatedTask on that indexed position\r\n                    tasks.splice(idx, 1, updatedTask)\r\n                }\r\n            });\r\n            localStorage.setItem('tasks', JSON.stringify(tasks));\r\n            // Another way using map\r\n            // const updateTask = tasks.map(task => {\r\n            //     if (task.id === updatedTask.id) {\r\n            //         task = updatedTask;\r\n            //         return task;\r\n            //     }\r\n            //     return task;\r\n            // })\r\n            // localStorage.setItem('tasks', JSON.stringify(updateTask));\r\n        },\r\n        deleteTask(taskToBeDeleted) {\r\n            let tasks = JSON.parse(localStorage.getItem('tasks'));\r\n            // Filter tasks that are not to be deleted\r\n            const filteredTask = tasks.filter(task => task.id !== taskToBeDeleted.id);\r\n            localStorage.setItem('tasks', JSON.stringify(filteredTask));\r\n        }\r\n    }\r\n})()\n\n//# sourceURL=webpack:///./src/Storage.js?");

/***/ }),

/***/ "./src/Task.js":
/*!*********************!*\
  !*** ./src/Task.js ***!
  \*********************/
/*! exports provided: TaskController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TaskController\", function() { return TaskController; });\nconst { StorageConroller } = __webpack_require__(/*! ./Storage */ \"./src/Storage.js\");\r\n// Function to control task data\r\nconst TaskController = ((Storage) => {\r\n    let data = {\r\n        tasks: Storage.getTasks(),\r\n        // Fake data ==========================\r\n        // [\r\n        //     {\r\n        //         id: 1,\r\n        //         title: 'task1',\r\n        //         subTitle: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas, harum',\r\n        //         assignedTo: 'Mostafa',\r\n        //         startAt: new Date().toISOString().slice(0, 10),\r\n        //         endAt: new Date().toISOString().slice(0, 10),\r\n        //         priority: 'High',\r\n        //         status: 'In Progress',\r\n        //         completedPercentage: 50\r\n        //     },\r\n        //     {\r\n        //         id: 2,\r\n        //         title: 'task2',\r\n        //         subTitle: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas, harum',\r\n        //         assignedTo: 'Mostafa',\r\n        //         startAt: new Date().toISOString().slice(0, 10),\r\n        //         endAt: new Date().toISOString().slice(0, 10),\r\n        //         priority: 'Low',\r\n        //         status: 'New',\r\n        //         completedPercentage: 50\r\n        //     },\r\n        //     {\r\n        //         id: 3,\r\n        //         title: 'task3',\r\n        //         subTitle: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas, harum',\r\n        //         assignedTo: 'Mahumud',\r\n        //         startAt: new Date().toISOString().slice(0, 10),\r\n        //         endAt: new Date().toISOString().slice(0, 10),\r\n        //         priority: 'Medium',\r\n        //         status: 'Completed',\r\n        //         completedPercentage: 90\r\n        //     }\r\n        // ],\r\n\r\n        // currentTask is for edit/update task usages\r\n        currentTask: null\r\n    };\r\n\r\n    return {\r\n        getData() {\r\n            return data;\r\n        },\r\n        getTasks() {\r\n            return data.tasks;\r\n        },\r\n        getTaskById(id) {\r\n            return data.tasks.find(task => task.id === id)\r\n        },\r\n        setCurrentTask(taskToBeEdited) {\r\n            // Assign target event task to currentTask property of data object\r\n            data.currentTask = taskToBeEdited;\r\n        },\r\n        getCurrentTask() {\r\n            return data.currentTask;\r\n        },\r\n        getTotalTaskCount() {\r\n            return data.tasks.length;\r\n        },\r\n        getStatusCount() {\r\n            let newCount = 0;\r\n            let progressCount = 0;\r\n            let completedCount = 0;\r\n            data.tasks.map(task => {\r\n                if (task.status === 'New') {\r\n                    newCount += 1;\r\n                } else if (task.status === 'In Progress') {\r\n                    progressCount += 1;\r\n                } else if (task.status === 'Completed') {\r\n                    completedCount += 1;\r\n                }\r\n            })\r\n            const allCounts = [newCount, progressCount, completedCount];\r\n            return [...allCounts];\r\n        },\r\n        updateItem(taskToBeUpdated) {\r\n            // updatedTask is needed for local storage purposes\r\n            let updatedTask = null;\r\n            // Assign map result array to data.tasks\r\n            data.tasks = data.tasks.map(task => {\r\n                if (task.id === data.currentTask.id) {\r\n                    task = taskToBeUpdated;\r\n                    // Assign current id because id field in form is hidden to UI\r\n                    task.id = data.currentTask.id;\r\n                    // Assign task to updatedTask for local storage purpose\r\n                    updatedTask = task;\r\n                    return task;\r\n                } else {\r\n                    return task;\r\n                }\r\n            });\r\n            return updatedTask;\r\n        },\r\n        deleteTask(targetedTask) {\r\n            data.tasks = data.tasks.filter(task => task.id !== targetedTask.id);\r\n        },\r\n        // Destructuring argument taskInfo\r\n        addTasks({\r\n            title,\r\n            subTitle,\r\n            assignedTo,\r\n            startAt,\r\n            endAt,\r\n            priority,\r\n            status,\r\n            completedPercentage\r\n        }) {\r\n            // Task id no should be started from 1 if tasks length is zero\r\n            // Another new task id will be plus 1 following last task id\r\n            const id = \r\n                data.tasks.length > 0 \r\n                ? data.tasks[data.tasks.length - 1].id + 1 \r\n                : 1\r\n\r\n            const task = {\r\n                // When property and value name are the same, avoid naming twice\r\n                id,\r\n                title,\r\n                subTitle,\r\n                assignedTo,\r\n                startAt,\r\n                endAt,\r\n                priority,\r\n                status,\r\n                completedPercentage\r\n            };\r\n\r\n            // data.tasks.push(task);\r\n            // console.log(task)\r\n\r\n            // Functiona way - ES6 (as like state management)\r\n            const updatedTask = {\r\n                ...data,\r\n                tasks: [...data.tasks, task]\r\n            }\r\n            data = updatedTask;\r\n            return task;\r\n\r\n        },\r\n        // Function to assign completed task on check icon click event\r\n        completedTask(id) {\r\n            // Mapping data task to check if id is matched\r\n            data.tasks = data.tasks.map(task => {\r\n                if (task.id === id) {\r\n                    if (task.status === 'New' || 'In Progress') {\r\n                        task.status = 'Completed';\r\n                        task.completedPercentage = 100;\r\n                    }\r\n                    return task;\r\n                } else {\r\n                    return task;\r\n                }\r\n            });\r\n        }\r\n    }\r\n})(StorageConroller)\n\n//# sourceURL=webpack:///./src/Task.js?");

/***/ }),

/***/ "./src/UI.js":
/*!*******************!*\
  !*** ./src/UI.js ***!
  \*******************/
/*! exports provided: UIController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UIController\", function() { return UIController; });\n// Function to connect with task data into UI DOM ============================================================\r\nconst UIController = (() => {\r\n    // Create object for all the necessary selectors\r\n    const selectors = {\r\n        id: '.id',\r\n        titleInput: '.title-input',\r\n        displayTaskArea: '.display-task-area',\r\n        taskBody: '#task-body',\r\n        addTask: '.add-btn',\r\n        updateTaskBtn: '.update-btn',\r\n        backBtn: '.back-btn',\r\n        subTitle: '.sub-title',\r\n        assignedTo: '.assigned-to',\r\n        startAt: '.start-date',\r\n        endAt: '.end-date',\r\n        percentageRange: '.percentage-range',\r\n        percentageNum: '.percentage-num',\r\n        total: '.total',\r\n        new: '.new',\r\n        inProgress: '.in-progress',\r\n        completed: '.completed',\r\n        alert: '.alert'\r\n    }\r\n\r\n    const isChecked = (inputName) => {\r\n        const arrField = document.getElementsByName(inputName)\r\n        for (let field of arrField) {\r\n            if (field.checked) return field.value;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const populateRadioBtn = (inputName) => {\r\n        switch (inputName) {\r\n            // Check status input\r\n            case 'Low':\r\n                document.querySelector('#low').checked = true;\r\n                break;\r\n            case 'Medium':\r\n                document.querySelector('#medium').checked = true;\r\n                break;\r\n            case 'High':\r\n                document.querySelector('#high').checked = true;\r\n                break;\r\n            // Check priority input\r\n            case 'New':\r\n                document.querySelector('#new').checked = true;\r\n                break;\r\n            case 'In Progress':\r\n                document.querySelector('#in-progress').checked = true;\r\n                break;\r\n            case 'Completed':\r\n                document.querySelector('#completed').checked = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    const displayTaskArea = () => {\r\n        document.querySelector(selectors.displayTaskArea).style.display = 'block';\r\n    }\r\n\r\n    const hideTaskArea = () => {\r\n        document.querySelector(selectors.displayTaskArea).style.display = 'none';\r\n    }\r\n\r\n    const handleBadgeColorPriority = (priority) => {\r\n        // const { high, medium, low } = task.priority;\r\n        if (priority === 'High') return 'primary'\r\n        if (priority === 'Medium') return 'success'\r\n        if (priority === 'Low') return 'warning'\r\n    }\r\n\r\n    const handleStyleCompletedStatus = (status) => {\r\n        if (status === 'Completed') {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const handleCompletedPercentage = (status) => {\r\n        let val = document.querySelector(selectors.percentageNum).value\r\n        if (isChecked(status) === 'Completed') {\r\n            return val = 100;\r\n        }\r\n        return val;\r\n    }\r\n\r\n    const styleProgressBar = (completedPercentage) => {\r\n        if (completedPercentage >= 75) return 'success';\r\n        else if (completedPercentage >= 50) return 'info';\r\n        else if (completedPercentage >= 25) return 'warning'\r\n        return 'danger';\r\n    }\r\n\r\n    const taskOutputTemplate = ({ id, title, assignedTo, endAt, priority, status, completedPercentage }) => {\r\n        return `\r\n            <tr>\r\n                <th scope=\"row\">${id}</th>\r\n                <td>${title}</td>\r\n                <td><span class=\"badge badge-pill badge-${handleBadgeColorPriority(priority)}\">${priority}</span></td>\r\n                <td class=${handleStyleCompletedStatus(status)\r\n                    ? 'completed-task'\r\n                    : ''\r\n                }>${status}</td>\r\n                <td>${endAt}</td>\r\n                <td>${assignedTo}</td>\r\n                <td>\r\n                    <div class=\"progress\">\r\n                    <div class=\"progress-bar progress-bar-striped bg-${styleProgressBar(completedPercentage)}\" role=\"progressbar\" style=\"width: ${completedPercentage}%\" aria-valuenow=\"${completedPercentage}\" aria-valuemin=\"0\" aria-valuemax=\"100\"> <span class=\"text-black font-weight-bold\">${completedPercentage}%</span> </div>\r\n                </div>\r\n                </td>\r\n                <td>\r\n                    <i class=\"fas fa-edit text-primary\"></i>\r\n                    <i class=\"fas fa-check-square text-success\"></i>\r\n                    <i class=\"fas fa-trash-alt text-danger\"></i>\r\n                </td>\r\n            </tr>\r\n        `\r\n    }\r\n\r\n    return {\r\n        getSelectors() {\r\n            return selectors\r\n        },\r\n        showUpdateState() {\r\n            document.querySelector(selectors.addTask).style.display = 'none';\r\n            document.querySelector(selectors.updateTaskBtn).style.display = 'inline-block';\r\n            document.querySelector(selectors.backBtn).style.display = 'inline-block';\r\n        },\r\n        showDefaultWithBackBtn() {\r\n            document.querySelector(selectors.addTask).style.display = 'inline-block';\r\n            document.querySelector(selectors.updateTaskBtn).style.display = 'none';\r\n            document.querySelector(selectors.backBtn).style.display = 'none';\r\n        },\r\n        showAlert(msg, className) {\r\n            const div = document.createElement('div');\r\n            div.textContent = msg;\r\n            div.className = `font-weight-bold alert alert-${className}`;\r\n            document\r\n                .querySelector(selectors.displayTaskArea)\r\n                .insertAdjacentElement('beforebegin', div)\r\n            // After 3 seconds, alert is removed\r\n            if (document.querySelector(selectors.alert)) {\r\n                this.clearAlert();\r\n            }\r\n        },\r\n        clearAlert() {\r\n            setTimeout(() => {\r\n                document.querySelector(selectors.alert).remove()\r\n            }, 3000)\r\n        },\r\n        clearFields() {\r\n            document.querySelector(selectors.titleInput).value = '';\r\n            document.querySelector(selectors.subTitle).value = '';\r\n            document.querySelector(selectors.assignedTo).value = '';\r\n            document.querySelector(selectors.startAt).value = '';\r\n            document.querySelector(selectors.endAt).value = '';\r\n            document.getElementsByName('priority').forEach(i => i.checked = false);\r\n            document.getElementsByName('status').forEach(i => i.checked = false);\r\n            document.querySelector(selectors.percentageNum).value = 10;\r\n            document.querySelector(selectors.percentageRange).value = 10;\r\n        },\r\n        showTotalTaskCount(tasksCount) {\r\n            document.querySelector(selectors.total).textContent = tasksCount;\r\n        },\r\n        showStatusCount([newCount, inProgress, completed]) {\r\n            document.querySelector(selectors.new).textContent = newCount;\r\n            document.querySelector(selectors.inProgress).textContent = inProgress;\r\n            document.querySelector(selectors.completed).textContent = completed;\r\n        },\r\n        getTaskInput() {\r\n            return {\r\n                id: document.querySelector(selectors.id).value,\r\n                title: document.querySelector(selectors.titleInput).value,\r\n                subTitle: document.querySelector(selectors.subTitle).value,\r\n                assignedTo: document.querySelector(selectors.assignedTo).value,\r\n                startAt: document.querySelector(selectors.startAt).value,\r\n                endAt: document.querySelector(selectors.endAt).value,\r\n                priority: isChecked('priority'),\r\n                status: isChecked('status'),\r\n                completedPercentage: handleCompletedPercentage('status')\r\n            }\r\n        },\r\n        populateForm({ title, subTitle, assignedTo, startAt, endAt, priority, status, completedPercentage }) {\r\n            // Display Update and Back button on the form\r\n            this.showUpdateState();\r\n            // Populate all the fields\r\n            document.querySelector(selectors.titleInput).value = title;\r\n            document.querySelector(selectors.subTitle).value = subTitle;\r\n            document.querySelector(selectors.assignedTo).value = assignedTo;\r\n            document.querySelector(selectors.startAt).value = startAt;\r\n            document.querySelector(selectors.endAt).value = endAt;\r\n            // Populate checked value from priority and status input radio field\r\n            populateRadioBtn(priority);\r\n            populateRadioBtn(status);\r\n            document.querySelector(selectors.percentageNum).value = completedPercentage;\r\n            document.querySelector(selectors.percentageRange).value = completedPercentage;\r\n        },\r\n        populateTask({ id, title, assignedTo, endAt, priority, status, completedPercentage }) {\r\n            // Display task area when new task is added\r\n            displayTaskArea();\r\n            let taskResult = '';\r\n            // Generate HTML tamplate\r\n            taskResult += taskOutputTemplate({ id, title, assignedTo, endAt, priority, status, completedPercentage });\r\n                // Insert taskResult after all the elements before end of the target div (taskBody)\r\n                document.querySelector(selectors.taskBody).insertAdjacentHTML(\"beforeend\", taskResult);\r\n        },\r\n        populateAllTask(tasks) {\r\n            // Handle display task table area\r\n            if (tasks.length > 0) displayTaskArea();\r\n            else hideTaskArea();\r\n\r\n            let tasksResult = '';\r\n            tasks.forEach(task => {\r\n                // Destructuring all the properties\r\n                const { id, title, priority, status, endAt, assignedTo, completedPercentage } = task;\r\n                // Generate HTML tamplate\r\n                tasksResult += taskOutputTemplate({ id, title, assignedTo, endAt, priority, status, completedPercentage });\r\n            });\r\n            document.querySelector(selectors.taskBody).innerHTML = tasksResult;\r\n\r\n        }\r\n    }\r\n})()\n\n//# sourceURL=webpack:///./src/UI.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { StorageConroller } = __webpack_require__(/*! ./Storage */ \"./src/Storage.js\");\r\nconst { TaskController } = __webpack_require__(/*! ./Task */ \"./src/Task.js\");\r\nconst { UIController } = __webpack_require__(/*! ./UI */ \"./src/UI.js\");\r\n\r\n// Function to combine between TaskController and UIController ================================================\r\nconst AppController = ((Task, UI, Storage) => {\r\n\r\n    // Load Event listeners\r\n    const loadEventListeners = () => {\r\n        const selectors = UI.getSelectors();\r\n\r\n        // Register all the functions of click event listeners\r\n        document.querySelector(selectors.percentageRange).addEventListener('input', rangeWithAmount);\r\n        document.querySelector(selectors.addTask).addEventListener('click', addNewTask);\r\n        document.querySelector(selectors.updateTaskBtn).addEventListener('click', updateTask);\r\n        document.querySelector(selectors.backBtn).addEventListener('click', backDefault);\r\n        document.querySelector(selectors.displayTaskArea).addEventListener('click', editTask);\r\n        document.querySelector(selectors.displayTaskArea).addEventListener('click', completeTask);\r\n        document.querySelector(selectors.displayTaskArea).addEventListener('click', deleteTask);\r\n    }\r\n\r\n    function rangeWithAmount(e) {\r\n        const value = e.target.value;\r\n        document.querySelector('.percentage-range').value = value;\r\n        document.querySelector('.percentage-num').value = value;\r\n    }\r\n\r\n    function addNewTask(e) {\r\n        e.preventDefault();\r\n\r\n        // Get all data of a task from UI from\r\n        const taskInfo = UI.getTaskInput();\r\n\r\n        // Destructuring taskInfo properties\r\n        const {\r\n            title,\r\n            subTitle,\r\n            assignedTo,\r\n            startAt,\r\n            endAt,\r\n            priority,\r\n            status,\r\n            completedPercentage\r\n        } = taskInfo;\r\n\r\n        // Validation all the fields\r\n        if (\r\n            title.trim() === ''\r\n            || subTitle.trim() === ''\r\n            || assignedTo.trim() === ''\r\n            || startAt === ''\r\n            || endAt === ''\r\n            || priority === false\r\n            || status === false\r\n            // || completedPercentage === ''\r\n        ) {\r\n            UI.showAlert('Oops... Some fields are empty. Please try again!', 'warning');\r\n        } else {\r\n            // Update to data center\r\n            const task = Task.addTasks(taskInfo);\r\n\r\n            // Update to Local Storage\r\n            Storage.addTask(task);\r\n\r\n            // Clear Field after submitting\r\n            UI.clearFields();\r\n\r\n            // Task count function calling\r\n            handleTaskCount();\r\n\r\n            // Update task to UI section\r\n            UI.populateTask(task)\r\n        }\r\n    }\r\n\r\n    function backDefault(e) {\r\n        e.preventDefault();\r\n        // Clear form fields\r\n        UI.clearFields();\r\n        // Show blank state\r\n        UI.showDefaultWithBackBtn();\r\n    }\r\n    function editTask(e) {\r\n        if (e.target.classList.contains('fa-edit')) {\r\n            // Getting targeted ID\r\n            const targetId = Number(e.target.parentElement.parentElement.children[0].innerText);\r\n            // Getting targeted task by Id\r\n            const taskToBeUpdated = Task.getTaskById(targetId);\r\n            // Update state to data center\r\n            Task.setCurrentTask(taskToBeUpdated);\r\n            // Display task info to UI from\r\n            UI.populateForm(taskToBeUpdated);\r\n            // Task count function calling\r\n            handleTaskCount();\r\n        }\r\n    }\r\n\r\n    function updateTask(e) {\r\n        e.preventDefault();\r\n        // Getting current input value\r\n        const inputValueToUpdate = UI.getTaskInput();\r\n        // Updating value to data center\r\n        const updatedTask = Task.updateItem(inputValueToUpdate);\r\n        // Update to localStorage\r\n        Storage.updateTask(updatedTask);\r\n        // Clear Fields\r\n        UI.clearFields();\r\n        // Remove Update and Back button\r\n        UI.showDefaultWithBackBtn();\r\n        // Getting tasks\r\n        const tasks = Task.getTasks();\r\n        // Update UI\r\n        UI.populateAllTask(tasks);\r\n        // Task count function calling\r\n        handleTaskCount();\r\n\r\n    }\r\n\r\n    function completeTask(e) {\r\n        if (e.target.classList.contains('fa-check-square')) {\r\n            // console.log(e.target.parentElement.parentElement.children[0].innerText);\r\n            const targetId = Number(e.target.parentElement.parentElement.children[0].innerText);\r\n            // Update status property to data center\r\n            Task.completedTask(targetId);\r\n            // Get task by Id\r\n            const targatedTask = Task.getTaskById(targetId)\r\n            // Update completed status to local storage\r\n            Storage.updateTask(targatedTask);\r\n            // Getting updated tasks from Task controller\r\n            const tasks = Task.getTasks()\r\n            // Update status to UI\r\n            UI.populateAllTask(tasks);\r\n\r\n            // Task count function calling\r\n            handleTaskCount();\r\n        }\r\n    }\r\n\r\n    function deleteTask(e) {\r\n        if (e.target.classList.contains('fa-trash-alt')) {\r\n            // Getting targeted ID\r\n            const targetId = Number(e.target.parentElement.parentElement.children[0].innerText);\r\n            // Getting targeted task by Id\r\n            const taskToBeDeleted = Task.getTaskById(targetId);\r\n            // Update task / remove task from data center\r\n            Task.deleteTask(taskToBeDeleted);\r\n            // Delete from local storage\r\n            Storage.deleteTask(taskToBeDeleted)\r\n            // Getting tasks\r\n            const tasks = Task.getTasks();\r\n            // Update UI\r\n            UI.populateAllTask(tasks);\r\n\r\n            // Task count function calling\r\n            handleTaskCount();\r\n        }\r\n    }\r\n\r\n    function handleTaskCount() {\r\n        // Gettting total task count and pass to UI section\r\n        const totalTask = Task.getTotalTaskCount();\r\n        UI.showTotalTaskCount(totalTask);\r\n\r\n        const statusCount = Task.getStatusCount();\r\n        UI.showStatusCount(statusCount);\r\n\r\n    }\r\n\r\n    return {\r\n        init() {\r\n            // Getting tasks from data center\r\n            const tasks = Task.getTasks();\r\n\r\n            // Task count function calling\r\n            handleTaskCount();\r\n\r\n            // Populating tasks in UI\r\n            UI.populateAllTask(tasks)\r\n\r\n            // Show edit state\r\n            UI.showUpdateState();\r\n\r\n            // Show back state\r\n            UI.showDefaultWithBackBtn();\r\n\r\n            // Call event listeners\r\n            loadEventListeners();\r\n        }\r\n    }\r\n})(TaskController, UIController, StorageConroller)\r\n// Arguments pass for better way because update/change make easier in future\r\n\r\n// App entry point\r\nAppController.init();\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });